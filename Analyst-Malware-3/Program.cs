using System;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using PcapDotNet.Packets;
using PcapDotNet.Core;



class Program
{
    static void Main()
    {
        // Nombre del registro de eventos (puedes cambiarlo según tus necesidades)
        string logName = "Application";

        // Objeto EventLog para acceder al registro de eventos
        EventLog eventLog = new EventLog(logName);

        // Obtener los últimos 1000 eventos del registro
        int eventsToRead = 1000;
        EventLogEntryCollection eventLogEntries = eventLog.Entries;
        int startIndex = eventLogEntries.Count - eventsToRead;

        StreamReader leer = new StreamReader("C:\\Log.txt");



        // Colección de incidencias desconocidas
        var incidenciasDesconocidas = new List<string>();

        if (eventsToRead <= 1000)
        {
            for (int i = startIndex; i < eventLogEntries.Count; i++)
            {
                EventLogEntry eventEntry = eventLogEntries[i];

                // Obtener el mensaje del evento
                string mensaje = eventEntry.Message;

                // Realizar el análisis deseado para identificar incidencias desconocidas
                if (!string.IsNullOrEmpty(mensaje))
                {
                    // Aquí puedes aplicar patrones o reglas específicas para identificar incidencias desconocidas
                    // En este ejemplo, simplemente se agregan todos los eventos cuyo mensaje no esté vacío
                    incidenciasDesconocidas.Add(mensaje);
                    incidenciasDesconocidas.Add(ThreadState.Running.ToString());
                    incidenciasDesconocidas.Add(ThreadState.Unknown.ToString());
                    incidenciasDesconocidas.Add(ThreadWaitReason.UserRequest.ToString());
                    incidenciasDesconocidas.Add(ThreadPriorityLevel.Highest.ToString());
                }
            }

        }
        if (incidenciasDesconocidas.Count > 0)
        {
            Console.WriteLine("Se encontraron las siguientes incidencias desconocidas:");
            foreach (var incidencia in incidenciasDesconocidas)
            {
                Console.WriteLine(incidencia);
            };
        }
        else
        {
            Console.WriteLine("No se encontraron incidencias desconocidas.");
        }

    }

    class monitoreo
    {
        static void NetworkMonitory()
        {
            // Buscar todas las interfaces de red disponibles
            IList<LivePacketDevice> devices = LivePacketDevice.AllLocalMachine;

            if (devices.Count == 0)
            {
                Console.WriteLine("No se encontraron interfaces de red.");
                return;
            }

            // Mostrar las interfaces de red disponibles y permitir al usuario seleccionar una
            Console.WriteLine("Interfaces de red disponibles:");
            for (int i = 0; i < devices.Count; i++)
            {
                LivePacketDevice device = devices[i];
                Console.WriteLine("{0}. {1}", i + 1, device.Description);
            }

            Console.Write("Seleccione la interfaz de red para monitorear: ");
            int selectedDeviceNumber = int.Parse(Console.ReadLine()) - 1;

            if (selectedDeviceNumber < 0 || selectedDeviceNumber >= devices.Count)
            {
                Console.WriteLine("Selección de interfaz de red inválida.");
                return;
            }

            // Obtener la interfaz de red seleccionada
            PacketDevice selectedDevice = devices[selectedDeviceNumber];

            // Abrir el dispositivo seleccionado y configurar el controlador de paquetes
            using (PacketCommunicator communicator = selectedDevice.Open(65536, PacketDeviceOpenAttributes.Promiscuous, 1000))
            {
                // Configurar el controlador de paquetes para capturar y procesar paquetes
                communicator.ReceivePackets(0, packet =>
                {
                // Lógica para analizar y procesar cada paquete capturado
                // Puedes imprimir información relevante del paquete o realizar otras acciones

                // Ejemplo: Imprimir información básica del paquete
                Console.WriteLine("Paquete capturado: origen = {0}, destino = {1}, protocolo = {2}",
                        packet.Ethernet.IpV4.Source.ToString(),
                        packet.Ethernet.IpV4.Destination.ToString(),
                        packet.Ethernet.IpV4.Protocol.ToString());
                });
            }
        }
    }
}
    



